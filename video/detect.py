# YOLOv5 ðŸš€ by Ultralytics, GPL-3.0 license

#rendszer importok
import time
import datetime
import subprocess


import argparse
import os
import signal
import sys
from pathlib import Path

import cv2
import numpy as np
import torch
import torch.backends.cudnn as cudnn


#mappavÃ¡ltÃ¡s az importokhoz
path = './yolov5'

os.chdir(path)

FILE = Path(path).resolve()
ROOT = FILE.parents[0] # YOLOv5 root directory
if str(ROOT) not in sys.path:
   sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

#yolov5 module importÃ¡lÃ¡sok

from models.experimental import attempt_load
from utils.datasets import LoadImages, LoadStreams
from utils.general import check_img_size, check_imshow, check_suffix, colorstr, \
    increment_path, non_max_suppression, print_args, scale_coords, xyxy2xywh, LOGGER
from utils.plots import Annotator, colors
from utils.torch_utils import  select_device

#vissza a jelenlegi mappÃ¡ba
os.chdir("../")

#mysql connector definÃ­ciÃ³
import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="laravel",
  password="laravel",
  database="laravel"
)
proc1 = None
proc2 = None
videoID = "0"


mycursor = mydb.cursor()
#mysql connector definÃ­ciÃ³ vÃ©ge

#RTMP stream URL
rtmp_url = "rtmp://localhost:1935/live/stream"

#alap futÃ³ fÃ¼ggvÃ¼ny
@torch.no_grad()
def run(weights=ROOT / 'yolov5s.pt',  # model.pt path(s)
        source=ROOT / 'data/images',  # file/dir/URL/glob, 0 for webcam
        imgsz=640,  # inference size (pixels)
        conf_thres=0.25,  # confidence threshold
        iou_thres=0.45,  # NMS IOU threshold
        device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        stream_img=True,  # stream and show results
        save_video=True,  # save results to video
        classes=None,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        project=ROOT / 'runs/detect',  # save results to project/name
        name='exp',  # save results to project/name
        exist_ok=False,  # existing project/name ok, do not increment
        line_thickness=3,  # bounding box thickness (pixels)
        hide_labels=False,  # hide labels
        hide_conf=False,  # hide confidences
        half=True,  # use FP16 half-precision inference
        ):
    global proc1
    global proc2
    #forrÃ¡svizsgÃ¡lat, hogy videÃ³-e vagy stream
    source = str(source)
    webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(
        ('rtsp://', 'rtmp://', 'http://', 'https://'))

    # MappÃ¡k
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # InkrementÃ¡lis mappalÃ©trehozÃ¡s
    save_dir.mkdir(parents=True, exist_ok=True)  # Mappa lÃ©trehozÃ¡sa

    # CPU/VideÃ³kÃ¡rtya inicializÃ¡lÃ¡sa
    device = select_device(device)
    half &= device.type != 'cpu'  # half precision only supported on CUDA

    # Modell betÃ¶ltÃ©se
    w = str(weights[0] if isinstance(weights, list) else weights)
    classify, suffix, suffixes = False, Path(w).suffix.lower(), ['.pt', '']

    check_suffix(w, suffixes)  # A megfelelÅ‘ kiterjesztÃ©s ellenÅ‘rzÃ©se
    stride, names = 64, [f'class{i}' for i in range(1000)]  # AlapÃ©rtÃ©kek beÃ¡llÃ­tÃ¡sa

    model = attempt_load(weights, map_location=device)
    stride = int(model.stride.max())  # model stride
    names = model.module.names if hasattr(model, 'module') else model.names  # OsztÃ¡lyok neveinek eltÃ¡rolÃ¡sa
    if half:
        model.half()  # to FP16
    model2 = attempt_load("./yolov5m.pt", map_location=device)
    stride2 = int(model2.stride.max())  # model stride
    names2 = model2.module.names if hasattr(model, 'module') else model2.names  # OsztÃ¡lyok neveinek eltÃ¡rolÃ¡sa
    if half:
        model2.half()  # to FP16
    imgsz = check_img_size(imgsz, s=stride2)  # check image size

    # Dataloader, itt tÃ¶lti be a videÃ³kat/streamet kÃ©pkockÃ¡kba
    if webcam:
        stream_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=True)
        bs = len(dataset)  # batch_size
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=True)
        bs = 1  # batch_size
    vid_path, vid_writer = [None] * bs, [None] * bs

   #a tovÃ¡bbstreamelÃ©s szempontjÃ¡bÃ³l lÃ©nyeges vÃ¡ltozÃ³k
    if webcam:  # video
        fps, width, height = 15, imgsz[0], imgsz[1]
    else:  # stream
        cap=cv2.VideoCapture(source)
        fps = cap.get(cv2.CAP_PROP_FPS)
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    #ffmpeg plugin indÃ­tÃ¡si paramÃ©terei





    #sql
    if save_video:
        global videoID
        start_time = datetime.datetime.now() # a videÃ³ kezdeti idÅ‘pontja
        start_localtime = time.localtime()
        sql = "INSERT INTO videos (videoName,videoDate,videoURL,videoAvailable) VALUES (%s,%s,%s, %s)" # SQL insert kÃ©rÃ©s
        val = (time.strftime("%Y%m%d%H%M%S", start_localtime)+source, time.strftime("%Y-%m-\%d %H:%M:%S", time.localtime()),'not ready', 0)
        mycursor.execute(sql, val) # SQL kÃ©rÃ©s vÃ©grehajtÃ¡sa
        mydb.commit() # SQL kÃ©rÃ©s lezÃ¡rÃ¡sa
        videoID=mycursor.lastrowid;# Az Ã©ppen mentendÅ‘ videÃ³ ID-ja
        save_path = str(save_dir) +"/"+time.strftime("%Y%m%d%H%M%S", start_localtime)+".mp4"
    #vÃ¡ltozÃ³k beÃ¡llÃ­tÃ¡sa
    predictionList = np.zeros((4,10,4)) #az Ã©szlelÃ©seket tÃ¡rolÃ³ vektor
    #(4 kÃ©pkockÃ¡n max 10 Ã©szlelÃ©s, minden Ã©szlelÃ©shez tartozik 4 adat, x,y koordinÃ¡ta egy prediction ID, ami Ã¶sszekÃ¶ti az Ã©szlelÃ©seket Ã©s egy frame number, hogy hÃ¡ny kÃ©pkockÃ¡n keresztÃ¼l tartott az esemÃ©ny)
    frameCounter = 0 #kÃ©pkocka szÃ¡mlÃ¡lÃ³ 
    predictionID=0
    frameNum = 0 
    # a hÃ¡lÃ³zat alkalmazÃ¡sa a kÃ©pkockÃ¡kon
    if device.type != 'cpu':
        model2(torch.zeros(1, 3, *imgsz).to(device).type_as(next(model.parameters())))  # run once
        model(torch.zeros(1, 3, *imgsz).to(device).type_as(next(model.parameters())))  # run once

    for path, img, im0s, vid_cap, s in dataset:

        frameCounter += 1
        #Ã©szlelÃ©sek elmozgatÃ¡sa 1 kÃ©pkockÃ¡val az Ã©szlelÃ©seket tartalmazÃ³ vektorban
        if(frameCounter >= 4):
            predictionList[0]=predictionList[1]
            predictionList[1]=predictionList[2]
            predictionList[2]=predictionList[3]
            predictionList[3]=np.zeros((10,4))
        #A kÃ©pek betÃ¶ltÃ©se Ã©s Ã¡talakÃ­tÃ¡sa
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0

        if len(img.shape) == 3:
            img = img[None]  # expand for batch dim

        # A hÃ¡lÃ³zatba betÃ¡plÃ¡lt kÃ©pkocka vÃ©gigfuttatÃ¡sa
        visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
        pred = model(img, augment=augment, visualize=visualize)[0]
        #pred2 = model2(img, augment=augment, visualize=visualize)[0]

        # Nem-maximum vÃ¡gÃ¡s (aktivÃ¡ciÃ³)
        pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=10)
        #pred2 = non_max_suppression(pred2, conf_thres, iou_thres, 0, agnostic_nms, max_det=10)
        # A megtalÃ¡lt becslÃ©sek feldolgozÃ¡sa
        for i, det in enumerate(pred):  # per image
            if webcam:  # batch_size >= 1
                p, im0, frame = path[i], im0s[i].copy(), dataset.count
                s += f'{i}: '
            else:
                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)
            p = Path(p)  # to Path
            #save_path = str(save_dir / p.name)
            s += '%gx%g ' % img.shape[2:]  # kiÃ­rÃ³ string(debug)
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            annotator = Annotator(im0, line_width=line_thickness, example=str(names))
            #DetektÃ¡lÃ¡sok feldolgozÃ¡sa 
            if len(det):
                # A befoglalÃ³ geometriÃ¡k Ã¡tmÃ©retezÃ©se img_sizerÃ³l im0 sizera
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                # Az eredmÃ©nyek kiÃ­rÃ¡sa(debug)
                for c in det[:, -1].unique():
                    n = (det[:, -1] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                # Az eredmÃ©nyek kiÃ­tÃ¡sa
                detectionCounter = 0
                for *xyxy, conf, cls in reversed(det):

                    if int(cls)!=1 :  # SQL-be mentÃ©s
                        predictionID += 1 #predictionID nÃ¶velÃ©se, ha mÃ¡r van egy prediction Ãºgyis Ã¡tvÃ¡lt arra
                        detectionCounter+=1 #detektÃ¡lÃ¡s szÃ¡mlÃ¡lÃ³ nÃ¶velÃ©se(hogy max 10 detektÃ¡lÃ¡s legyen)
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                        clss = cls.clone().detach().view(1).tolist()
                        current_time = time.localtime() #idÅ‘pont elmentÃ©se
                        distance=0.11   #maximum tÃ¡volsÃ¡g, ami mÃ©g 1 Ã©szlelÃ©snek nevezhetÅ‘(pixel)
                        predID=predictionID
                        
                        #vÃ©gignÃ©zzÃ¼k, hogy talÃ¡lhatÃ³-e mÃ¡r Ã©szlelÃ©s, ha igen akkor elmentjÃ¼k a predID-jÃ©t Ã©s a framenum-ot megnÃ¶veljÃ¼k 1-el
                        frameRepeatCounter=0
                        if frameCounter > 4 :
                            for j in range(0,3):
                                for k in predictionList[j]:
                                    if(k[0]!=0 and k[1]!=0):
                                        if(abs(k[0]-xywh[0])<=distance and abs(k[1]-xywh[1])<=distance):
                                            frameRepeatCounter+=1
                                            predID = k[2]
                                            frameNum=k[3]+1
                        #Ha mÃ©g nincs 4 frame akkor csak feltÃ¶ltÃ©s kÃ¶vetkezik
                        if frameCounter<4 :
                            if detectionCounter<10 :
                                predictionList[frameCounter][detectionCounter][0] = xywh[0]
                                predictionList[frameCounter][detectionCounter][1] = xywh[1]
                                predictionList[frameCounter][detectionCounter][2] = predID
                                predictionList[frameCounter][detectionCounter][3] = frameNum
                        #Ha van mÃ¡r 4 frame akkor csak az utolsÃ³ kÃ©pkocka adatainak feltÃ¶ltÃ©se zajlik
                        else:
                            if detectionCounter<10 :
                                predictionList[3][detectionCounter][0] = xywh[0]
                                predictionList[3][detectionCounter][1] = xywh[1]
                                predictionList[3][detectionCounter][2] = predID
                                predictionList[3][detectionCounter][3] = frameNum
                        #ha volt prediction akkor predictionID-t csÃ¶kkentsÃ¼k, hogy ne nÅ‘ljÃ¶n feleslegesen
                        if(frameRepeatCounter>=1):
                            predictionID-=1
                        #ha legalÃ¡bb 3 frame volt akkor
                        if(frameRepeatCounter >=3):
                            #ha 3 vagy tÃ¶bb frame volt akkor mÃ¡r van sql bejegyzÃ©s, azt mÃ³dosÃ­tjuk
                            if frameNum>3:
                                sql = "UPDATE events SET classid=%s,time=%s,frames=%s,videoID=%s,level=%s,predID=%s WHERE videoID = %s AND PredID= %s"
                                val = (int(clss[0]), time.strftime("%Y-%m-\%d %H:%M:%S", current_time),frameNum, videoID,1, predID,videoID,predID)
                                mycursor.execute(sql, val)
                                mydb.commit()
                            #hozunk lÃ©tre Ãºj SQL bejegyzÃ©st ha mÃ©g csak 3x volt
                            else:
                                sql = "INSERT INTO events (classid,time,frames,videoID,level,predID) VALUES (%s, %s,%s, %s,%s, %s)"
                                val = (int(clss[0]), time.strftime("%Y-%m-\%d %H:%M:%S", current_time),frameNum, videoID,1, predID)
                                mycursor.execute(sql, val)
                                mydb.commit()


                    if stream_img:  # Add bbox to image(befoglalÃ³ geometria kÃ©pre mentÃ©se)
                        c = int(cls)  # integer class
                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label, color=colors(c, True))



            #emberek megtalÃ¡lÃ¡sa
            ''' det2 = pred2[0]
            if len(det2):
                # A befoglalÃ³ geometriÃ¡k Ã¡tmÃ©retezÃ©se img_sizerÃ³l im0 sizera
                det2[:, :4] = scale_coords(img.shape[2:], det2[:, :4], im0.shape).round()

                # Az eredmÃ©nyek kiÃ­rÃ¡sa(debug)
                for c in det2[:, -1].unique():
                    n = (det2[:, -1] == c).sum()  # detections per class
                    s += f"{n} {names2[int(c)]}{'s' * (n > 1)}, "  # add to string
                # Az eredmÃ©nyek kiÃ­tÃ¡sa
                detectionCounter = 0
                for *xyxy, conf, cls in reversed(det2):
                    xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                    exist = False
                    #Ha mÃ©g nincs 4 frame akkor csak feltÃ¶ltÃ©s kÃ¶vetkezik
                    if frameCounter>4 :
                        for k in predictionList[3]:
                            print(str(xywh[0]) + " "+ str(k[0]) +" "+  str(xywh[2]+xywh[0])  +" "+  str(xywh[1])+" "+   str(k[1]) +" "+ str(xywh[3]+xywh[1]))
                            if(xywh[0] < k[0] and k[0] < xywh[2]+xywh[0] and xywh[1] < k[1] and k[1] < xywh[3]+xywh[1]):
                                print(str(xywh[0]) + " "+ str(k[0]) +" "+  str(xywh[2])  +" "+  str(xywh[1])+" "+   str(k[1]) +" "+ str(xywh[3]))
                                exist = True;


                    if stream_img:  # Add bbox to image(befoglalÃ³ geometria kÃ©pre mentÃ©se)
                        c = int(cls)  # integer class
                        label2 = None if hide_labels else (names2[c] if hide_conf else f'{names2[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label2, color=colors(c, True))
 
            
            ''' 

            # Print completed inference(debug only)
            LOGGER.info(f'{s}Done.')



            # EredmÃ©nyek kÃ¶zvetÃ­tÃ©se
            im0 = annotator.result()
            if stream_img:
                if proc1 == None:
                    if vid_cap:  # video
                        fps = vid_cap.get(cv2.CAP_PROP_FPS)
                        w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                        h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                    else:  # stream
                        fps, w, h = 30, im0.shape[1], im0.shape[0]
                    command = ['ffmpeg',
                            '-re',
                        '-y',
                        '-f', 'rawvideo',
                        '-pix_fmt', 'bgr24',
                        '-s', "{}x{}".format(str(w), str(h)),
                        '-r', str(fps),
                        '-i', '-',
                        '-tune', 'zerolatency',
                        '-crf', '18',
                        '-vcodec', 'libx264',
                        '-pix_fmt', 'yuv420p',
                        '-f', 'flv',
                        rtmp_url]
                    #ffmpeg plugin indÃ­tÃ¡sa
                    proc1 = subprocess.Popen(command, stdin=subprocess.PIPE)
                cv2.imshow(str(p), im0)
                proc1.stdin.write(im0.tobytes())
                cv2.waitKey(1)  # vÃ¡r 1 millisecond
            
            #videÃ³ mentÃ©se
            if save_video:
                #ha a videÃ³mentÅ‘ nem fut indÃ­tsa el
                if proc2 == None:
                    if vid_cap:  # video
                        fps = vid_cap.get(cv2.CAP_PROP_FPS)
                        w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                        h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                    else:  # stream
                        fps, w, h = 30, im0.shape[1], im0.shape[0]
                    command2 = ['ffmpeg',
                        '-re',
                        '-y',
                        '-f', 'rawvideo',
                        '-pix_fmt', 'bgr24',
                        '-s', "{}x{}".format(str(w), str(h)),
                        '-r', str(fps),
                        '-i', '-',
                        '-tune', 'zerolatency',
                        '-crf', '18',
                        '-vcodec', 'libx264',
                        '-pix_fmt', 'yuv420p',
                        str(save_path)]
                    proc2 = subprocess.Popen(command2, stdin=subprocess.PIPE)
                else: 
                    #videÃ³ mentÃ©se
                    proc2.stdin.write(im0.tobytes())
            
                time_spent= datetime.datetime.now()-start_time
                #ha legalÃ¡bb 1 Ã³rÃ¡ja megy a videÃ³ zÃ¡rja le a fÃ¡jlt, mentse el SQL-ben, Ã©s Ã­rjon Ãºj videÃ³t
                if time_spent.total_seconds() >= 60*60:
                    sql = "UPDATE videos SET videoURL=%s, videoAvailable=%s WHERE id=%s"
                    val = (save_path, 1, videoID)
                    mycursor.execute(sql, val)
                    mydb.commit()
                    #Ãºj videÃ³ definiÃ¡lÃ¡sa
                    start_localtime = time.localtime()
                    save_path = str(save_dir) +"/"+time.strftime("%Y%m%d%H%M%S", start_localtime)+".mp4"
                    sql = "INSERT INTO videos (videoName,videoDate,videoURL,videoAvailable) VALUES (%s,%s,%s, %s)" # SQL insert kÃ©rÃ©s
                    val = (time.strftime("%Y%m%d%H%M%S", start_localtime)+source, time.strftime("%Y-%m-\%d %H:%M:%S", time.localtime()),'not ready', 0)
                    mycursor.execute(sql, val) # SQL kÃ©rÃ©s vÃ©grehajtÃ¡sa
                    mydb.commit() # SQL kÃ©rÃ©s lezÃ¡rÃ¡sa
                    videoID=mycursor.lastrowid;# Az Ã©ppen mentendÅ‘ videÃ³ ID-ja
                    #videÃ³writer kill
                    proc2.terminate()
                    proc2 = None
                    start_time = datetime.datetime.now() # a videÃ³ kezdeti idÅ‘pontja


